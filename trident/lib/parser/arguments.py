#!/usr/bin/env python3
# -*- coding: utf-8 -*-

""" Trident: Argument Parser

Parses and validate arguments passed to the program.

@author: Jacob Wahlman
"""

from argparse import ArgumentParser
from sys import maxsize

from typing import NoReturn, Any

import logging
logger = logging.getLogger("__main__")


class TridentArgumentParser:
    """ Argument parser for the Trident program. Collects the required/optional arguments and ensures validity of each argument. """
    def __init__(self):
        self.parser = self._setup_parser()
        self._collect_arguments()
        self.args = self.parser.parse_args()

    def _setup_parser(self) -> ArgumentParser:
        """ Setup the :class:`ArgumentParser` used to parse the program arguments.

        :return: The parser used by Trident.
        :rtype: :class:`ArgumentParser`
        """
        parser = ArgumentParser(
            prog="Trident",
            description="Trident: Asynchronous Monitor Environment"
        )
        return parser

    def _collect_arguments(self) -> NoReturn:
        """ Collect all argument definitions from optional, plugin, storage and required arguments. """
        self._collect_optional_arguments()
        self._collect_plugin_arguments()
        self._collect_storage_arguments()
        self._collect_required_arguments()

    def _collect_optional_arguments(self) -> NoReturn:
        """ Define the optional arguments for Trident, like logging level and the amount of workers to use. """
        group = self.parser.add_argument_group(title="Trident Logging")
        logging_group = group.add_mutually_exclusive_group()
        logging_group.add_argument("-v", "--verbose", action="store_true", help="Enable verbose logging for Trident.", default=None)
        logging_group.add_argument("-q", "--quiet", action="store_true", help="Disables all logging for Trident.", default=None)

        group = self.parser.add_argument_group(title="Trident Runtime Arguments")
        group.add_argument("-w", "--workers", type=self._valid_positive_integer,
            help="Specify the maximum number of workers to run concurrently in Trident."
                " Defaults to '1' which means Trident will run all plugins sequentially. Must be a positive integer.")

    def _collect_plugin_arguments(self) -> NoReturn:
        """ Define the arguments applied on all the plugins in Trident. """
        group = self.parser.add_argument_group(title="Trident Plugin(s)")
        group.add_argument("-p:n", "--dont-store-on-error", action="store_true", default=None)
        group.add_argument("-p:f", "--filter-results", type=str, nargs="+", help="Filter ")

    def _collect_storage_arguments(self) -> NoReturn:
        """ Define the arguments used to define the storage behaviour. """
        arg_group = self.parser.add_argument_group(title="Trident Storage")
        arg_group.add_argument("-s:p", "--path-store", type=str, metavar="PATH",
            help="Path to where on the filesystem to store the Trident store.",
            default=None)

        group = arg_group.add_mutually_exclusive_group()
        group.add_argument("-s:n", "--no-store", action="store_true", help="Disables all storage of results generated by Trident plugins.", default=None)
        group.add_argument("-s:g" ,"--global-store", type=str, help="Use a global store for all runners.")

    def _collect_required_arguments(self) -> NoReturn:
        """ Define the required arguments used for the Trident program. """
        group = self.parser.add_argument_group(title="Trident Required Arguments")
        group.add_argument("-c", "--config", help="Trident Config File. Defaults to './config/trident.json'", default="config/trident.json")
        group.add_argument("-c:s", "--section", help="Trident Config File Section. Defaults to 'TRIDENT'", default="TRIDENT")

    def _valid_positive_integer(self, value: Any) -> int:
        """ Ensures that the provided value can be intrepreted as an integer and is positive.
        :param value: The value to check.
        :return: The integer passed if valid.
        :rtype: int
        """
        try:
            value = int(value)
            if not (0 < value <= maxsize):
                raise ValueError
        except ValueError:
            self.parser.print_help()
            exit(1)
        else:
            return value
